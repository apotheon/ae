= Introduction

Ae is an assertions framework for Ruby. It's designed
around the concept of an Assertor --an Assertion Functor,
or Higher-Order Function, which reroutes messages while
monitoring the calls for failed given conditions.

== What's Provided

Requiring the AE library.

  require 'ae'

Loads two classes, +Assertion+ and +Assertion+::+Assertor+,
three primary Kernel methods +assert+, +expect+ and +must+
and a few aliases there-of, and a handful of core extensions
that make writing certain types of assertions easier.

== Assertion and Assertor Classes

The +Assertion+ class is a subclass of +Exception+. It is the
error raised when an assertion fails. (FYI, in Test::Unit
the equivalent class was called AssertionFailureError.
Ae has adopted the shortend term for my fingers sake.)

As mentioned above the Assertion::Assertor class is a type
of Functor, or Higher-Order function, which interceeds
with a nomral message invocation to monitor for raised
Assertion exceptions.

== Assertion Methods

The three methods, +assert+, +expect+ and +must+ all return
an Assertor instance when used fluidly, i.e. magic-dot notation,
higher-order notation, functor notation, whatever you prefer
to call it.

  assert.assert.is_a?(Assertion::Assertor)

This allows us to write statments like:

  1.assert == 1
  1.expect == 1
  1.must == 1

These all do the same thing. These examples all evaluate as true.
If the operation returns false or nil, then an Assertion error
is raised.

  Assertion.assert.raised? do
    1.assert == 2
    1.expect == 2
    1.must == 2
  end

All three methods also have specialized functionality when supplied
with a block and/or arguments.

== How It All Works

How does this work? An Assertor essentially sits in wait for 
another method to be called on it, at which time it applies
the method to the original receiver of #assert, but wrapped
in a clause that raises an Assertion should the statement
fail. So, if we wanted to be padantic, we could write our
tests like:

  raise Assertion.new("1 != 1") unless 1 == 1

Instead of 

  1.assert == 1

Obviously using Assertor methods are whole lot nicer.

